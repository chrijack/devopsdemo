parts:
  - name: Part 1
    intro: In this part we will setup a local cluster with minikube, deploy a public image from dockerhub, customize that image, and then finally deploy it inside our local cluster.
    steps:
      - cap: Start up the Kubernetes cluster with Minikube, giving it some extra resources.
        com: minikube start --memory 8000 --cpus 2 --kubernetes-version v1.11.0

      - cap: Enable the Minikube add-ons Heapster and Ingress.
        com: minikube addons enable heapster; minikube addons enable ingress

      - cap: Set up the cluster registry by applying a .yaml manifest file.
        com: kubectl apply -f manifests/registry.yaml

      - cap: Wait for the registry to finish deploying. Note that this may take several minutes.
        com: kubectl rollout status deployments/registry

      - cap: View the registry user interface in a web browser.
        com: minikube service registry-ui

  - name: Part 2
    intro: In this part we will Setup Jenkins, and setup an automated pipeline to build, push and deploy our custom appliction.
    steps:
      - cap: Before we do anything, let's make sure the private registry deployment we've setup in the previous part is available.
        com: kubectl rollout status deployment/registry

      - cap: Let's build the Jenkins Docker image we'll use in our Kubernetes cluster. 
        com: docker build -t 127.0.0.1:30400/jenkins:latest -f applications/jenkins/Dockerfile applications/jenkins

      - cap: Once again we'll need to set up the Socat Registry proxy container to push images, so let's build it. Feel free to skip this step in case the socat-registry image already exists from Part 1 (to check, run `docker images` in a separate terminal). 
        com: docker build -t socat-registry -f applications/socat/Dockerfile applications/socat

      - cap: Run the proxy container from the image.
        com: docker stop socat-registry; docker rm socat-registry; docker run -d -e "REG_IP=`minikube ip`" -e "REG_PORT=30400" --name socat-registry -p 30400:5000 socat-registry; sleep 10

      - cap: With our proxy container up and running, we can now push our Jenkins image to the local repository.
        com: docker push 127.0.0.1:30400/jenkins:latest

      - cap: The proxy’s work is done, so you can go ahead and stop it.
        com: docker stop socat-registry

      - cap: Install Jenkins, which we’ll use to create our automated CI/CD pipeline. It will take the pod a minute or two to roll out.
        com: kubectl apply -f manifests/jenkins.yaml; kubectl rollout status deployment/jenkins

      - cap: Open the Jenkins UI in a web browser.
        com: minikube service jenkins
      - cap: Display the Jenkins admin password with the following command, and right-click to copy it. IMPORTANT: BE CAREFUL NOT TO PRESS CTRL-C TO COPY THE PASSWORD AS THIS WILL STOP THE SCRIPT.
        com: kubectl exec -it `kubectl get pods --selector=app=jenkins --output=jsonpath={.items..metadata.name}` cat /root/.jenkins/secrets/initialAdminPassword

      - cap: Switch back to the Jenkins UI. Paste the Jenkins admin password in the box and click Continue. Click Install suggested plugins and wait for the process to complete.
        com: echo '' 

      - cap: Create an admin user and credentials, and click Save and Finish. (Make sure to remember these credentials as you will need them for repeated logins.) Click Start using Jenkins.
        com: echo ''

  - name: Part 3
    intro: This part will have us setup the various applications that will present the crossword puzzle.  We will run a sample etcd cluster as a cache, a pages application containing the front-end, a crossword server using mongodb, and a monitoring and scaling server application. 
    steps:

      - cap: Start the etcd operator and service on the cluster. You may notice errors showing up as it is waiting to start up the cluster. This is normal until it starts.
        com: scripts/etcd.sh

      - cap: Now that we have an etcd service, we need an etcd client. The following command will set up a directory within etcd for storing key-value pairs, and then run the etcd client.
        com: kubectl create -f manifests/etcd-job.yml

      - cap: Check the status of the job in step 2 to make sure it deployed.
        com: kubectl describe jobs/etcd-job
      
      - cap: The crossword application is a multi-tier application whose services depend on each other. We will create three services in Kubernetes ahead of time, so that the deployments are aware of them.
        com: kubectl apply -f manifests/all-services.yaml
      
      - cap: Now we're going to walk through an initial build of the monitor-scale service.
        com: docker build -t 127.0.0.1:30400/monitor-scale:`git rev-parse --short HEAD` -f applications/monitor-scale/Dockerfile applications/monitor-scale

      - cap: Set up a proxy so we can push the monitor-scale Docker image we just built to our cluster's registry.
        com: docker stop socat-registry; docker rm socat-registry; docker run -d -e "REG_IP=`minikube ip`" -e "REG_PORT=30400" --name socat-registry -p 30400:5000 socat-registry; sleep 5

      - cap: Push the monitor-scale image to the registry.
        com: docker push 127.0.0.1:30400/monitor-scale:`git rev-parse --short HEAD`

      - cap: The proxy’s work is done, so go ahead and stop it.
        com: docker stop socat-registry
      
      - cap: Open the registry UI and verify that the monitor-scale image is in our local registry.
        com: minikube service registry-ui

      - cap: Create the monitor-scale deployment and service. 
        com: sed 's#127.0.0.1:30400/monitor-scale:latest#127.0.0.1:30400/monitor-scale:'`git rev-parse --short HEAD`'#' applications/monitor-scale/k8s/deployment.yaml | kubectl apply -f -
      
      - cap: Wait for the monitor-scale deployment to finish.
        com: kubectl rollout status deployment/monitor-scale

      - cap: View pods to see the monitor-scale pod running.
        com: kubectl get pods

      - cap: View services to see the monitor-scale service. 
        com: kubectl get services

      - cap: View ingress rules to see the monitor-scale ingress rule.
        com: kubectl get ingress

      - cap: View deployments to see the monitor-scale deployment.
        com: kubectl get deployments

      - cap: We will run a script to bootstrap the puzzle and mongo services, creating Docker images and storing them in the local registry. The puzzle.sh script runs through the same build, proxy, push, and deploy steps we just ran through manually for both services.
        com: scripts/puzzle.sh

      - cap: Check to see if the puzzle and mongo services have been deployed.
        com: kubectl rollout status deployment/puzzle

      - cap: Bootstrap the kr8sswordz frontend web application. This script follows the same build proxy, push, and deploy steps that the other services followed.
        com: scripts/kr8sswordz-pages.sh

      - cap: Check to see if the frontend has been deployed.
        com: kubectl rollout status deployment/kr8sswordz

      - cap: Check out all the pods that are running.
        com: kubectl get pods

      - cap: Start the web application in your default browser. You may have to refresh your browser so that the puzzle appears properly.
        com: minikube service kr8sswordz

  - name: Part 4
    intro: In this part we will return to our Jenkins instance and setup a pipeline for the kr8sswordz application.
    steps:

      - cap: Enter the following command to open the Jenkins UI in a web browser. Log in to Jenkins using the username and password you previously set up.  
        com: minikube service jenkins

      - cap: We’ll want to create a new pipeline for the puzzle service that we previously deployed. On the left in Jenkins, click New Item.
        com: echo ''
    
      - cap: Enter the item name as "Puzzle-Service", click Pipeline, and click OK.
        com: echo '' 

      - cap: Under the Build Triggers section, select Poll SCM. For the Schedule, enter the the string H/5 * * * * which will poll the Git repo every 5 minutes for changes. 
        com: echo ''

      - cap: In the Pipeline section, change the Definition to "Pipeline script from SCM". Set the SCM property to GIT. Set the Repository URL to your forked repo (created in Part 2), such as https://github.com/[GIT USERNAME]/kubernetes-ci-cd.git. Set the Script Path to applications/puzzle/Jenkinsfile 
        com: echo ''

      - cap: When you are finished, click Save. On the left, click Build Now to run the new pipeline. You should see it successfully run through the build, push, and deploy steps in a few minutes.
        com: echo ''

      - cap: View the Kr8sswordz application.
        com: minikube service kr8sswordz
        
      - cap: Spin up several instances of the puzzle service by moving the slider to the right and clicking Scale. For reference, click on the Submit button, noting that the green hit does not register on the puzzle services.
        com: echo ''

      - cap: Edit applications/puzzle/common/models/crossword.js in the nano editor. You'll see a commented section on lines 42-43 that indicates to uncomment a specific line. Uncomment line 43 by deleting the forward slashes. Press Ctrl+X to close the file, type Y to confirm the filename, and press Enter to write the changes to the file.
        com: nano applications/puzzle/common/models/crossword.js

      - cap: Commit and push the change to your forked Git repo. 
        com: echo ''
      
      - cap: In Jenkins, open up the Puzzle-Service pipeline and wait until it triggers a build. It should trigger every 5 minutes.
        com: echo ''
 
      - cap: After it triggers, observe how the puzzle services disappear in the Kr8sswordz Puzzle app, and how new ones take their place.
        com: echo ''   
        
      - cap: Try clicking Submit to test that hits now register as light green.
        com: echo ''  

  # - name: Part 5
  #   intro: Spinnaker
  #   steps:

  #     - cap: Initialize Helm
  #       com: helm init; sleep 10; kubectl --namespace kube-system rollout status deployment/tiller-deploy

  #     - cap: Install Chart
  #       com: helm install --name spinnaker applications/spinnaker-helm/spinnaker-chart
      
  #     - cap: Launch Deck
  #       com: minikube service deck
